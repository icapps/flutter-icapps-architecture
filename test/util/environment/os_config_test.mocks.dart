// Mocks generated by Mockito 5.3.0 from annotations
// in icapps_architecture/test/util/environment/os_config_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:device_info_plus/device_info_plus.dart' as _i3;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAndroidDeviceInfo_0 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIosDeviceInfo_1 extends _i1.SmartFake implements _i2.IosDeviceInfo {
  _FakeIosDeviceInfo_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLinuxDeviceInfo_2 extends _i1.SmartFake
    implements _i2.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWebBrowserInfo_3 extends _i1.SmartFake
    implements _i2.WebBrowserInfo {
  _FakeWebBrowserInfo_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMacOsDeviceInfo_4 extends _i1.SmartFake
    implements _i2.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWindowsDeviceInfo_5 extends _i1.SmartFake
    implements _i2.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBaseDeviceInfo_6 extends _i1.SmartFake
    implements _i2.BaseDeviceInfo {
  _FakeBaseDeviceInfo_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i3.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
          Invocation.getter(#androidInfo),
          returnValue: _i4.Future<_i2.AndroidDeviceInfo>.value(
              _FakeAndroidDeviceInfo_0(this, Invocation.getter(#androidInfo))))
      as _i4.Future<_i2.AndroidDeviceInfo>);
  @override
  _i4.Future<_i2.IosDeviceInfo> get iosInfo =>
      (super.noSuchMethod(Invocation.getter(#iosInfo),
              returnValue: _i4.Future<_i2.IosDeviceInfo>.value(
                  _FakeIosDeviceInfo_1(this, Invocation.getter(#iosInfo))))
          as _i4.Future<_i2.IosDeviceInfo>);
  @override
  _i4.Future<_i2.LinuxDeviceInfo> get linuxInfo =>
      (super.noSuchMethod(Invocation.getter(#linuxInfo),
              returnValue: _i4.Future<_i2.LinuxDeviceInfo>.value(
                  _FakeLinuxDeviceInfo_2(this, Invocation.getter(#linuxInfo))))
          as _i4.Future<_i2.LinuxDeviceInfo>);
  @override
  _i4.Future<_i2.WebBrowserInfo> get webBrowserInfo => (super.noSuchMethod(
          Invocation.getter(#webBrowserInfo),
          returnValue: _i4.Future<_i2.WebBrowserInfo>.value(
              _FakeWebBrowserInfo_3(this, Invocation.getter(#webBrowserInfo))))
      as _i4.Future<_i2.WebBrowserInfo>);
  @override
  _i4.Future<_i2.MacOsDeviceInfo> get macOsInfo =>
      (super.noSuchMethod(Invocation.getter(#macOsInfo),
              returnValue: _i4.Future<_i2.MacOsDeviceInfo>.value(
                  _FakeMacOsDeviceInfo_4(this, Invocation.getter(#macOsInfo))))
          as _i4.Future<_i2.MacOsDeviceInfo>);
  @override
  _i4.Future<_i2.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
          Invocation.getter(#windowsInfo),
          returnValue: _i4.Future<_i2.WindowsDeviceInfo>.value(
              _FakeWindowsDeviceInfo_5(this, Invocation.getter(#windowsInfo))))
      as _i4.Future<_i2.WindowsDeviceInfo>);
  @override
  _i4.Future<_i2.BaseDeviceInfo> get deviceInfo =>
      (super.noSuchMethod(Invocation.getter(#deviceInfo),
              returnValue: _i4.Future<_i2.BaseDeviceInfo>.value(
                  _FakeBaseDeviceInfo_6(this, Invocation.getter(#deviceInfo))))
          as _i4.Future<_i2.BaseDeviceInfo>);
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i2.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [IosUtsname].
///
/// See the documentation for Mockito's code generation for more information.
class MockIosUtsname extends _i1.Mock implements _i2.IosUtsname {
  MockIosUtsname() {
    _i1.throwOnMissingStub(this);
  }
}
