// Mocks generated by Mockito 5.3.0 from annotations
// in icapps_architecture/test/util/logging/logging_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:dio/dio.dart' as _i3;
import 'package:icapps_architecture/icapps_architecture.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Log].
///
/// See the documentation for Mockito's code generation for more information.
class MockLog extends _i1.Mock implements _i2.Log {
  @override
  void verbose(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(
              #verbose, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void debug(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#debug, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void info(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#info, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void warning(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(
              #warning, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void error(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#error, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void v(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#v, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void d(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#d, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void i(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#i, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void w(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#w, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void e(String? message, {dynamic error, StackTrace? trace}) =>
      super.noSuchMethod(
          Invocation.method(#e, [message], {#error: error, #trace: trace}),
          returnValueForMissingStub: null);
  @override
  void logNetworkError(_i2.NetworkError? error) =>
      super.noSuchMethod(Invocation.method(#logNetworkError, [error]),
          returnValueForMissingStub: null);
  @override
  void logNetworkRequest(_i3.RequestOptions? request) =>
      super.noSuchMethod(Invocation.method(#logNetworkRequest, [request]),
          returnValueForMissingStub: null);
  @override
  void logNetworkResponse(_i3.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#logNetworkResponse, [response]),
          returnValueForMissingStub: null);
}
